# -*- coding: utf-8 -*-
"""SegNet_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zWwEkNN1iGkqJmUX2kXBsVZ7TlL5IkYH
"""

import torch

print(torch.__version__)
print(torch.cuda.is_available())
if torch.cuda.is_available():
    print(torch.cuda.get_device_name(0))
else:
    print("CUDA not available. Running on CPU.")

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')
!unzip "/content/drive/MyDrive/archive.zip" -d /content/

import os
print(os.listdir('/content/COD10K-v3'))

train_path = '/content/COD10K-v3/Train'
test_path = '/content/COD10K-v3/Test'

def get_subfolders(base_path):
    return {
        'image': f'{base_path}/Image',
        'gt_object': f'{base_path}/GT_Object',
        'gt_edge': f'{base_path}/GT_Edge',
        'gt_instance': f'{base_path}/GT_Instance'
    }

train_folders = get_subfolders(train_path)
test_folders = get_subfolders(test_path)

import os

def count_files(folder_dict):
    for key, folder in folder_dict.items():
        print(f"{key}: {len(os.listdir(folder))} files")

print("Train set:")
count_files(train_folders)
print("\nTest set:")
count_files(test_folders)

import os
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image

class COD10KDataset(Dataset):
    def __init__(self, folders, transform=None, mask_transform=None):
        self.image_paths = sorted(os.listdir(folders['image']))
        self.image_dir = folders['image']
        self.mask_dir = folders['gt_object']
        self.transform = transform
        self.mask_transform = mask_transform

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        image_name = self.image_paths[idx]
        img_path = os.path.join(self.image_dir, image_name)
        mask_path = os.path.join(self.mask_dir, image_name.replace('.jpg', '.png'))

        image = Image.open(img_path).convert('RGB')
        mask = Image.open(mask_path).convert('L')

        if self.transform:
            image = self.transform(image)
        if self.mask_transform:
            mask = self.mask_transform(mask)

        return image, mask

from torch.utils.data import random_split

transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor()
])

mask_transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor()
])

# Create full training dataset
train_dataset = COD10KDataset(folders=train_folders, transform=transform, mask_transform=mask_transform)
test_dataset = COD10KDataset(folders=test_folders, transform=transform, mask_transform=mask_transform)

# Split into train and validation
train_size = int(0.8 * len(train_dataset))
val_size = len(train_dataset) - train_size
train_dataset, val_dataset = random_split(train_dataset, [train_size, val_size])

# Create dataloaders
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=8, shuffle=False)  # No shuffle for validation
test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)

num_train = len(train_dataset)
num_val = len(val_dataset)
num_test = len(test_dataset)

print(f"Number of training samples: {num_train}")
print(f"Number of validation samples: {num_val}")
print(f"Number of test samples: {num_test}")

images, masks = next(iter(train_loader))

print("Image batch shape:", images.shape)
print("Mask batch shape:", masks.shape)

import matplotlib.pyplot as plt
from PIL import Image
import os

def show_all_types(folders, indices):
    n = len(indices)
    fig, axes = plt.subplots(n, 4, figsize=(12, 5))
    type_names = ['Image', 'GT_Object', 'GT_Edge', 'GT_Instance']
    image_files = sorted(os.listdir(folders['image']))
    for row, idx in enumerate(indices):
        img_name = image_files[idx]
        paths = [
            os.path.join(folders['image'], img_name),
            os.path.join(folders['gt_object'], img_name.replace('.jpg', '.png')),
            os.path.join(folders['gt_edge'], img_name.replace('.jpg', '.png')),
            os.path.join(folders['gt_instance'], img_name.replace('.jpg', '.png'))
        ]
        for col, (path, tname) in enumerate(zip(paths, type_names)):
            img = Image.open(path)
            axes[row, col].imshow(img if col == 0 else img, cmap=None if col == 0 else 'gray')
            axes[row, col].set_title(tname)
            axes[row, col].axis('off')
    plt.tight_layout()
    plt.show()

show_all_types(train_folders, indices=range(5))

import torch
import matplotlib.pyplot as plt

def show_images_and_heatmaps(images, masks, num_images=8):
    batch_size = images.shape[0]
    num_images = min(num_images, batch_size)
    fig, axes = plt.subplots(num_images, 5, figsize=(10, 10))
    if num_images == 1:
        axes = axes.reshape(1, 5)
    for i in range(num_images):
        axes[i, 0].imshow(images[i].permute(1, 2, 0).cpu())
        axes[i, 0].set_title(f'Image {i+1}')
        axes[i, 0].axis('off')

        axes[i, 1].imshow(masks[i].squeeze().cpu(), cmap='gray')
        axes[i, 1].set_title(f'Mask {i+1}')
        axes[i, 1].axis('off')

        for c in range(3):
            heatmap = images[i, c].cpu()
            axes[i, c+2].imshow(heatmap, cmap='hot')
            axes[i, c+2].set_title(f'Channel {c+1} Heatmap')
            axes[i, c+2].axis('off')
    plt.tight_layout()
    plt.show()

show_images_and_heatmaps(images, masks, num_images=8)

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader

# ----------------------
# SegNet Definition
# ----------------------
class SegNet(nn.Module):
    def __init__(self, in_channels=3, out_channels=1):
        super(SegNet, self).__init__()
        self.enc1 = self.conv_block(in_channels, 64)
        self.enc2 = self.conv_block(64, 128)
        self.enc3 = self.conv_block(128, 256)
        self.enc4 = self.conv_block(256, 512)

        self.pool = nn.MaxPool2d(2, 2, return_indices=True)
        self.unpool = nn.MaxUnpool2d(2, 2)

        self.dec4 = self.conv_block(512, 256)
        self.dec3 = self.conv_block(256, 128)
        self.dec2 = self.conv_block(128, 64)
        self.dec1 = nn.Conv2d(64, out_channels, 3, padding=1)

    def conv_block(self, in_ch, out_ch):
        return nn.Sequential(
            nn.Conv2d(in_ch, out_ch, 3, padding=1),
            nn.BatchNorm2d(out_ch),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_ch, out_ch, 3, padding=1),
            nn.BatchNorm2d(out_ch),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        x1 = self.enc1(x)
        x1p, idx1 = self.pool(x1)
        x2 = self.enc2(x1p)
        x2p, idx2 = self.pool(x2)
        x3 = self.enc3(x2p)
        x3p, idx3 = self.pool(x3)
        x4 = self.enc4(x3p)
        x4p, idx4 = self.pool(x4)

        x = self.unpool(x4p, idx4, output_size=x4.size())
        x = self.dec4(x)
        x = self.unpool(x, idx3, output_size=x3.size())
        x = self.dec3(x)
        x = self.unpool(x, idx2, output_size=x2.size())
        x = self.dec2(x)
        x = self.unpool(x, idx1, output_size=x1.size())
        x = self.dec1(x)
        return x

def iou_score(pred, target, threshold=0.5, smooth=1e-6):
    pred = torch.sigmoid(pred) > threshold
    target = target.bool()
    intersection = (pred & target).float().sum((1,2,3))
    union = (pred | target).float().sum((1,2,3))
    iou = (intersection + smooth) / (union + smooth)
    return iou.mean().item()

def dice_score(pred, target, threshold=0.5, smooth=1e-6):
    pred = torch.sigmoid(pred) > threshold
    target = target.bool()
    intersection = (pred & target).float().sum((1,2,3))
    total = pred.float().sum((1,2,3)) + target.float().sum((1,2,3))
    dice = (2. * intersection + smooth) / (total + smooth)
    return dice.mean().item()

def train_segnet(model, train_loader, val_loader, test_loader, num_epochs=5, lr=0.001):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model.to(device)
    criterion = nn.BCEWithLogitsLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=3)
    num_epochs=4
    for epoch in range(num_epochs):
        model.train()
        train_loss, train_iou, train_dice = 0, 0, 0
        for images, masks in train_loader:
            images, masks = images.to(device), masks.to(device).float()
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, masks)
            loss.backward()
            optimizer.step()

            train_loss += loss.item()
            train_iou += iou_score(outputs, masks)
            train_dice += dice_score(outputs, masks)

        train_loss /= len(train_loader)
        train_iou /= len(train_loader)
        train_dice /= len(train_loader)

        model.eval()
        val_loss, val_iou, val_dice = 0, 0, 0
        with torch.no_grad():
            for images, masks in val_loader:
                images, masks = images.to(device), masks.to(device).float()
                outputs = model(images)
                loss = criterion(outputs, masks)
                val_loss += loss.item()
                val_iou += iou_score(outputs, masks)
                val_dice += dice_score(outputs, masks)

        val_loss /= len(val_loader)
        val_iou /= len(val_loader)
        val_dice /= len(val_loader)

        test_loss, test_iou, test_dice = 0, 0, 0
        with torch.no_grad():
            for images, masks in test_loader:
                images, masks = images.to(device), masks.to(device).float()
                outputs = model(images)
                loss = criterion(outputs, masks)
                test_loss += loss.item()
                test_iou += iou_score(outputs, masks)
                test_dice += dice_score(outputs, masks)

        test_loss /= len(test_loader)
        test_iou /= len(test_loader)
        test_dice /= len(test_loader)

        scheduler.step(val_loss)

        print(f"Epoch {epoch+1}/{num_epochs}")
        print(f"Train - Loss: {train_loss:.4f} | IoU: {train_iou:.4f} | Dice: {train_dice:.4f}")
        print(f"Val   - Loss: {val_loss:.4f} | IoU: {val_iou:.4f} | Dice: {val_dice:.4f}")
        print(f"Test  - Loss: {test_loss:.4f} | IoU: {test_iou:.4f} | Dice: {test_dice:.4f}")
        print("-" * 60)
model = SegNet()
train_segnet(model, train_loader, val_loader, test_loader, num_epochs=2)

def debug_model_outputs(model, dataloader, device):
    model.eval()
    dataiter = iter(dataloader)
    images, masks = next(dataiter)
    images = images.to(device)

    with torch.no_grad():
        raw_outputs = model(images)
        probabilities = torch.sigmoid(raw_outputs)

    print(f"Raw output range: [{raw_outputs.min():.4f}, {raw_outputs.max():.4f}]")
    print(f"Probability range: [{probabilities.min():.4f}, {probabilities.max():.4f}]")

    return raw_outputs, probabilities

raw_outputs, probabilities = debug_model_outputs(model, train_loader, device)

##finding the number of foreground and background pixels ratio in order to see the major segmenting region
def analyze_class_distribution(dataloader):
    total_pixels = 0
    foreground_pixels = 0

    for images, masks in dataloader:
        total_pixels += masks.numel()
        foreground_pixels += masks.sum().item()

    bg_ratio = (total_pixels - foreground_pixels) / total_pixels
    fg_ratio = foreground_pixels / total_pixels

    print(f"Background ratio: {bg_ratio:.4f}")
    print(f"Foreground ratio: {fg_ratio:.4f}")
    print(f"Class imbalance ratio: {bg_ratio/fg_ratio:.2f}:1")

analyze_class_distribution(train_loader)

import numpy as np
def visualize_in_batches(model, loader, device, batch_size=32, images_per_row=8):
    model.eval()
    for batch_idx, (images, _) in enumerate(loader):
        with torch.no_grad():
            images = images.to(device)
            outputs = model(images)
            probs = torch.sigmoid(outputs).cpu().numpy()

        # Visualize this batch
        num_images = images.shape[0]
        rows = int(np.ceil(num_images / images_per_row))

        plt.figure(figsize=(2.5*images_per_row, 2.5*rows))
        for idx in range(num_images):
            img = images[idx].cpu().permute(1, 2, 0).numpy()
            prob_map = probs[idx].squeeze()

            plt.subplot(rows, images_per_row*2, 2*idx+1)
            plt.imshow(img)
            plt.axis('off')

            plt.subplot(rows, images_per_row*2, 2*idx+2)
            plt.imshow(img)
            plt.imshow(prob_map, cmap='jet', alpha=0.5)
            plt.axis('off')

        plt.tight_layout()
        plt.suptitle(f'Batch {batch_idx+1}', y=1.02)
        plt.show()
        plt.close()

# Usage:
visualize_in_batches(model, test_loader, device, batch_size=32, images_per_row=8)
