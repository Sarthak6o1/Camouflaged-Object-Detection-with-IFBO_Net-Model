# -*- coding: utf-8 -*-
"""SegNet_Architecture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HBOQ93p7RgYv3Gd5fRLVtk3pniZRCi5U
"""

import torch

print(torch.__version__)
print(torch.cuda.is_available())
if torch.cuda.is_available():
    print(torch.cuda.get_device_name(0))
else:
    print("CUDA not available. Running on CPU.")

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')
!unzip "/content/drive/MyDrive/archive.zip" -d /content/

import os
print(os.listdir('/content/COD10K-v3'))

train_path = '/content/COD10K-v3/Train'
test_path = '/content/COD10K-v3/Test'

def get_subfolders(base_path):
    return {
        'image': f'{base_path}/Image',
        'gt_object': f'{base_path}/GT_Object',
        'gt_edge': f'{base_path}/GT_Edge',
        'gt_instance': f'{base_path}/GT_Instance'
    }

train_folders = get_subfolders(train_path)
test_folders = get_subfolders(test_path)

import os

def count_files(folder_dict):
    for key, folder in folder_dict.items():
        print(f"{key}: {len(os.listdir(folder))} files")

print("Train set:")
count_files(train_folders)
print("\nTest set:")
count_files(test_folders)

import os
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image

class COD10KDataset(Dataset):
    def __init__(self, folders, transform=None, mask_transform=None):
        self.image_paths = sorted(os.listdir(folders['image']))
        self.image_dir = folders['image']
        self.mask_dir = folders['gt_object']
        self.transform = transform
        self.mask_transform = mask_transform

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        image_name = self.image_paths[idx]
        img_path = os.path.join(self.image_dir, image_name)
        mask_path = os.path.join(self.mask_dir, image_name.replace('.jpg', '.png'))

        image = Image.open(img_path).convert('RGB')
        mask = Image.open(mask_path).convert('L')

        if self.transform:
            image = self.transform(image)
        if self.mask_transform:
            mask = self.mask_transform(mask)

        return image, mask

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

mask_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

train_dataset = COD10KDataset(train_folders, transform=transform, mask_transform=mask_transform)
test_dataset = COD10KDataset(test_folders, transform=transform, mask_transform=mask_transform)

batch_size = 48
num_workers = 2

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)

print(f"Number of training samples: {len(train_dataset)}")
print(f"Number of test samples: {len(test_dataset)}")
print(f"Number of training batches: {len(train_loader)}")
print(f"Number of test batches: {len(test_loader)}")

def count_files(folder_dict):
    for key, folder in folder_dict.items():
        print(f"{key}: {len(os.listdir(folder))} files")

print("Train set:")
count_files(train_folders)

print("\nTest set:")
count_files(test_folders)

images, masks = next(iter(train_loader))

print("Image batch shape:", images.shape)
print("Mask batch shape:", masks.shape)

import matplotlib.pyplot as plt
from PIL import Image
import os

def show_all_types(folders, indices):
    n = len(indices)
    fig, axes = plt.subplots(n, 4, figsize=(12, 5))
    type_names = ['Image', 'GT_Object', 'GT_Edge', 'GT_Instance']
    image_files = sorted(os.listdir(folders['image']))
    for row, idx in enumerate(indices):
        img_name = image_files[idx]
        paths = [
            os.path.join(folders['image'], img_name),
            os.path.join(folders['gt_object'], img_name.replace('.jpg', '.png')),
            os.path.join(folders['gt_edge'], img_name.replace('.jpg', '.png')),
            os.path.join(folders['gt_instance'], img_name.replace('.jpg', '.png'))
        ]
        for col, (path, tname) in enumerate(zip(paths, type_names)):
            img = Image.open(path)
            axes[row, col].imshow(img if col == 0 else img, cmap=None if col == 0 else 'gray')
            axes[row, col].set_title(tname)
            axes[row, col].axis('off')
    plt.tight_layout()
    plt.show()

show_all_types(train_folders, indices=range(5))

import torch
import matplotlib.pyplot as plt

def show_images_and_heatmaps(images, masks, num_images=8):
    batch_size = images.shape[0]
    num_images = min(num_images, batch_size)
    fig, axes = plt.subplots(num_images, 5, figsize=(10, 10))
    if num_images == 1:
        axes = axes.reshape(1, 5)
    for i in range(num_images):
        axes[i, 0].imshow(images[i].permute(1, 2, 0).cpu())
        axes[i, 0].set_title(f'Image {i+1}')
        axes[i, 0].axis('off')

        axes[i, 1].imshow(masks[i].squeeze().cpu(), cmap='gray')
        axes[i, 1].set_title(f'Mask {i+1}')
        axes[i, 1].axis('off')

        for c in range(3):
            heatmap = images[i, c].cpu()
            axes[i, c+2].imshow(heatmap, cmap='hot')
            axes[i, c+2].set_title(f'Channel {c+1} Heatmap')
            axes[i, c+2].axis('off')
    plt.tight_layout()
    plt.show()

show_images_and_heatmaps(images, masks, num_images=8)

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image
import os

class DownConv2(nn.Module):
    def __init__(self, chin, chout, kernel_size):
        super().__init__()
        self.seq = nn.Sequential(
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chout, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chout),
            nn.ReLU(),
        )
        self.mp = nn.MaxPool2d(kernel_size=2, stride=2, return_indices=True)

    def forward(self, x):
        y = self.seq(x)
        z, indices = self.mp(y)
        return z, indices, y.shape

class DownConv3(nn.Module):
    def __init__(self, chin, chout, kernel_size):
        super().__init__()
        self.seq = nn.Sequential(
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chout, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chout),
            nn.ReLU(),
        )
        self.mp = nn.MaxPool2d(kernel_size=2, stride=2, return_indices=True)

    def forward(self, x):
        y = self.seq(x)
        z, indices = self.mp(y)
        return z, indices, y.shape

class UpConv2SegNet(nn.Module):
    def __init__(self, chin, chout, kernel_size):
        super().__init__()
        self.mup = nn.MaxUnpool2d(kernel_size=2)
        self.seq = nn.Sequential(
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chout, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chout),
            nn.ReLU(),
        )

    def forward(self, x, indices, output_shape):
        y = self.mup(x, indices, output_size=output_shape)
        z = self.seq(y)
        return z

class UpConv3SegNet(nn.Module):
    def __init__(self, chin, chout, kernel_size):
        super().__init__()
        self.mup = nn.MaxUnpool2d(kernel_size=2)
        self.seq = nn.Sequential(
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chin, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chin),
            nn.ReLU(),
            nn.Conv2d(in_channels=chin, out_channels=chout, kernel_size=kernel_size, padding=kernel_size//2, bias=False),
            nn.BatchNorm2d(chout),
            nn.ReLU(),
        )

    def forward(self, x, indices, output_shape):
        y = self.mup(x, indices, output_size=output_shape)
        z = self.seq(y)
        return z

import torch
import torch.nn as nn

class SegNet(nn.Module):
    def __init__(self, in_channels=3, num_classes=1):
        super().__init__()
        self.encoder_conv_1 = nn.Sequential(
            nn.Conv2d(in_channels, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True)
        )
        self.pool1 = nn.MaxPool2d(2, 2, return_indices=True)
        self.encoder_conv_2 = nn.Sequential(
            nn.Conv2d(64, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True)
        )
        self.pool2 = nn.MaxPool2d(2, 2, return_indices=True)
        self.encoder_conv_3 = nn.Sequential(
            nn.Conv2d(128, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True)
        )
        self.pool3 = nn.MaxPool2d(2, 2, return_indices=True)
        self.encoder_conv_4 = nn.Sequential(
            nn.Conv2d(256, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True)
        )
        self.pool4 = nn.MaxPool2d(2, 2, return_indices=True)
        self.encoder_conv_5 = nn.Sequential(
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True)
        )
        self.pool5 = nn.MaxPool2d(2, 2, return_indices=True)

        self.unpool5 = nn.MaxUnpool2d(2, 2)
        self.decoder_conv_5 = nn.Sequential(
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True)
        )
        self.unpool4 = nn.MaxUnpool2d(2, 2)
        self.decoder_conv_4 = nn.Sequential(
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True)
        )
        self.unpool3 = nn.MaxUnpool2d(2, 2)
        self.decoder_conv_3 = nn.Sequential(
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True)
        )
        self.unpool2 = nn.MaxUnpool2d(2, 2)
        self.decoder_conv_2 = nn.Sequential(
            nn.Conv2d(128, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True)
        )
        self.unpool1 = nn.MaxUnpool2d(2, 2)
        self.decoder_conv_1 = nn.Sequential(
            nn.Conv2d(64, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, num_classes, 3, padding=1)
        )

    def forward(self, x):
        x1 = self.encoder_conv_1(x)
        x1p, idx1 = self.pool1(x1)
        x2 = self.encoder_conv_2(x1p)
        x2p, idx2 = self.pool2(x2)
        x3 = self.encoder_conv_3(x2p)
        x3p, idx3 = self.pool3(x3)
        x4 = self.encoder_conv_4(x3p)
        x4p, idx4 = self.pool4(x4)
        x5 = self.encoder_conv_5(x4p)
        x5p, idx5 = self.pool5(x5)

        d5 = self.unpool5(x5p, idx5, output_size=x5.size())
        d5 = self.decoder_conv_5(d5)
        d4 = self.unpool4(d5, idx4, output_size=x4.size())
        d4 = self.decoder_conv_4(d4)
        d3 = self.unpool3(d4, idx3, output_size=x3.size())
        d3 = self.decoder_conv_3(d3)
        d2 = self.unpool2(d3, idx2, output_size=x2.size())
        d2 = self.decoder_conv_2(d2)
        d1 = self.unpool1(d2, idx1, output_size=x1.size())
        out = self.decoder_conv_1(d1)
        return out

import torch
import numpy as np
from scipy.ndimage import distance_transform_edt

def compute_mae(pred, mask):
    pred = torch.sigmoid(pred)
    return torch.abs(pred - mask).mean().item()

def compute_smeasure(pred, mask):
    pred = (pred > 0.5).float()
    mask = (mask > 0.5).float()
    alpha = 0.5
    y = mask.mean()
    if y == 0:
        return 1 - pred.mean().item()
    elif y == 1:
        return pred.mean().item()
    else:
        fg = pred * mask
        bg = (1 - pred) * (1 - mask)
        o_fg = fg.sum() / (mask.sum() + 1e-6)
        o_bg = bg.sum() / ((1 - mask).sum() + 1e-6)
        return alpha * o_fg + (1 - alpha) * o_bg

def compute_ephi(pred, mask, threshold=0.5):
    pred = torch.sigmoid(pred)
    pred = (pred > threshold).float()
    mask = (mask > threshold).float()
    intersection = ((pred == mask) & (mask == 1)).float().sum()
    union = ((pred == 1) | (mask == 1)).float().sum()
    return (intersection / union).item() if union > 0 else 0

def compute_fbw(pred, mask, beta2=0.3**2, threshold=0.5):
    pred = torch.sigmoid(pred)
    pred = (pred > threshold).float()
    mask = (mask > threshold).float()
    fbw_scores = []
    pred_np = pred.cpu().numpy()
    mask_np = mask.cpu().numpy()
    for i in range(pred_np.shape[0]):
        fg = mask_np[i,0]
        bg = 1 - fg
        d_fg = distance_transform_edt(bg)
        d_bg = distance_transform_edt(fg)
        weight = np.ones_like(fg)
        weight[fg == 0] = 1 + 5 * np.exp(-d_fg[fg == 0]**2 / 2)
        weight[fg == 1] = 1 + 5 * np.exp(-d_bg[fg == 1]**2 / 2)
        tp = (pred_np[i,0] * fg * weight).sum()
        fp = (pred_np[i,0] * (1 - fg) * weight).sum()
        fn = ((1 - pred_np[i,0]) * fg * weight).sum()
        precision = tp / (tp + fp + 1e-8)
        recall = tp / (tp + fn + 1e-8)
        fbw = (1 + beta2) * precision * recall / (beta2 * precision + recall + 1e-8)
        fbw_scores.append(fbw)
    return np.mean(fbw_scores)

def compute_accuracy(pred, mask, threshold=0.5):
    pred = torch.sigmoid(pred)
    pred = (pred > threshold).float()
    mask = (mask > threshold).float()
    correct = (pred == mask).float().sum()
    total = torch.numel(pred)
    return (correct / total).item()

def dice_loss(pred, mask, threshold=0.5, smooth=1e-5):
    pred = torch.sigmoid(pred)
    pred = (pred > threshold).float()
    mask = (mask > threshold).float()
    intersection = (pred * mask).sum(dim=(2, 3))
    union = pred.sum(dim=(2, 3)) + mask.sum(dim=(2, 3))
    dice = (2. * intersection + smooth) / (union + smooth)
    return 1 - dice.mean()

def iou_score(pred, mask, threshold=0.5, smooth=1e-5):
    pred = torch.sigmoid(pred)
    pred = (pred > threshold).float()
    mask = (mask > threshold).float()
    intersection = (pred * mask).sum(dim=(2, 3))
    union = ((pred + mask) >= 1).float().sum(dim=(2, 3))
    iou = (intersection + smooth) / (union + smooth)
    return iou.mean().item()

import torch
import torch.nn as nn
class BCEDiceLoss(nn.Module):
    def __init__(self, weight_bce=0.5, weight_dice=0.5, edge_weight=0.2):
        super().__init__()
        self.bce = nn.BCEWithLogitsLoss()
        self.weight_bce = weight_bce
        self.weight_dice = weight_dice
        self.edge_weight = edge_weight

    def forward(self, pred, mask, edge_pred=None, edge_mask=None):
        bce = self.bce(pred, mask)
        smooth = 1e-5
        probs = torch.sigmoid(pred)
        intersection = (probs * mask).sum(dim=(2,3))
        union = probs.sum(dim=(2,3)) + mask.sum(dim=(2,3))
        dice = 1 - ((2. * intersection + smooth) / (union + smooth)).mean()
        loss = self.weight_bce * bce + self.weight_dice * dice
        if edge_pred is not None and edge_mask is not None:
            edge_bce = self.bce(edge_pred, edge_mask)
            loss = loss + self.edge_weight * edge_bce
        return loss

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from tqdm import tqdm

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = SegNet().to(device)
optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=1e-4)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)
criterion = BCEDiceLoss()

num_epochs = 50

for epoch in range(num_epochs):
    model.train()
    train_loss = 0
    train_mae = 0
    train_salpha = 0
    train_ephi = 0
    train_fbw = 0
    train_acc = 0
    train_dice = 0
    train_iou = 0

    for img, mask in tqdm(train_loader, desc=f"Train Epoch {epoch+1}/{num_epochs}"):
        img, mask = img.to(device), mask.to(device)
        pred = model(img)
        loss = criterion(pred, mask)
        optimizer.zero_grad()
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        optimizer.step()

        train_loss += loss.item()
        train_mae += compute_mae(pred, mask)
        train_salpha += compute_smeasure(pred, mask)
        train_ephi += compute_ephi(pred, mask)
        train_fbw += compute_fbw(pred, mask)
        train_acc += compute_accuracy(pred, mask)
        train_dice += 1 - dice_loss(pred, mask).item()
        train_iou += iou_score(pred, mask)

    n_train = len(train_loader)
    print(f"Epoch {epoch+1} Train: "
          f"Loss: {train_loss/n_train:.4f}, "
          f"Acc: {train_acc/n_train:.4f}, "
          f"MAE: {train_mae/n_train:.4f}, "
          f"Sα: {train_salpha/n_train:.4f}, "
          f"Eϕ: {train_ephi/n_train:.4f}, "
          f"Fβw: {train_fbw/n_train:.4f}, "
          f"Dice: {train_dice/n_train:.4f}, "
          f"IoU: {train_iou/n_train:.4f}")

    scheduler.step()

model.eval()
    test_loss = 0
    test_mae = 0
    test_salpha = 0
    test_ephi = 0
    test_fbw = 0
    test_acc = 0
    test_dice = 0
    test_iou = 0

    with torch.no_grad():
        for img, mask in tqdm(test_loader, desc=f"Test Epoch {epoch+1}/{num_epochs}"):
            img, mask = img.to(device), mask.to(device)
            pred = model(img)
            loss = criterion(pred, mask)
            test_loss += loss.item()
            test_mae += compute_mae(pred, mask)
            test_salpha += compute_smeasure(pred, mask)
            test_ephi += compute_ephi(pred, mask)
            test_fbw += compute_fbw(pred, mask)
            test_acc += compute_accuracy(pred, mask)
            test_dice += 1 - dice_loss(pred, mask).item()
            test_iou += iou_score(pred, mask)

    n_test = len(test_loader)
    print(f"Epoch {epoch+1} Test: "
          f"Loss: {test_loss/n_test:.4f}, "
          f"Acc: {test_acc/n_test:.4f}, "
          f"MAE: {test_mae/n_test:.4f}, "
          f"Sα: {test_salpha/n_test:.4f}, "
          f"Eϕ: {test_ephi/n_test:.4f}, "
          f"Fβw: {test_fbw/n_test:.4f}, "
          f"Dice: {test_dice/n_test:.4f}, "
          f"IoU: {test_iou/n_test:.4f}")
